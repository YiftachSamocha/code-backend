[
    {
        "type": "async",
        "content": "const fetchUsers = async () =>[{ id: 1, name: 'Alice' }, { id: 2, name: 'Bob' }];\nconst fetchComments = async (userId) => (userId === 1 ? ['A', 'B'] : ['X', 'Y', 'Z']);\n\n// Your function\nasync function getUserComments() {\n// Implement this function\n     }\n\ngetUserComments().then(console.log);\n// Expected: [{ name: 'Alice', commentCount: 2 }, { name: 'Bob', commentCount: 3 }]",
        "challenge": "Fetch a list of users and their respective comments from APIs.\n\t\t\tFor each user, return an object containing their name and the total number of comments they have.",
        "solution": "async function getUserComments() {\n    const users = await fetchUsers();\n    return Promise.all(\n        users.map(async (user) => {\n            const comments = await fetchComments(user.id);\n            return { name: user.name, commentCount: comments.length };\n        })\n    );\n}\n\ngetUserComments().then(console.log);\n// Output: [{ name: 'Alice', commentCount: 2 }, { name: 'Bob', commentCount: 3 }]",
        "starter": "const fetchUsers = async () =>[{ id: 1, name: 'Alice' }, { id: 2, name: 'Bob' }];\nconst fetchComments = async (userId) => (userId === 1 ? ['A', 'B'] : ['X', 'Y', 'Z']);\n\n// Your function\nasync function getUserComments() {\n// Implement this function\n     }\n\ngetUserComments().then(console.log);\n// Expected: [{ name: 'Alice', commentCount: 2 }, { name: 'Bob', commentCount: 3 }]",
        "title": "Async case",
        "subtitle": "Fetch User Comments"
    },
    {
        "type": "dom",
        "content": "<ul id=\"items\">\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n    <li>Item 4</li>\n    <li>Item 5</li>\n</ul>\n<script>\n    // Your function\n    function highlightEvenItems() {\n        // Implement this function\n    }\n\n    highlightEvenItems();\n</script>",
        "challenge": "Given a list of items in the DOM, write a function that highlights all the even-indexed items by changing their background color to lightblue.",
        "solution": "function highlightEvenItems() {\n    const items = document.querySelectorAll('#items li');\n    items.forEach((item, index) => {\n        if (index % 2 !== 0) {\n            item.style.backgroundColor = 'lightblue';\n        }\n    });\n}\n\nhighlightEvenItems();",
        "starter": "<ul id=\"items\">\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n    <li>Item 4</li>\n    <li>Item 5</li>\n</ul>\n<script>\n    // Your function\n    function highlightEvenItems() {\n        // Implement this function\n    }\n\n    highlightEvenItems();\n</script>",
        "title": "DOM manipulation",
        "subtitle": "Highlight Even Items"
    },
    {
        "type": "array",
        "content": "const users = [\n    { name: 'Alice', city: 'New York' },\n    { name: 'Bob', city: 'Los Angeles' },\n    { name: 'Charlie', city: 'New York' },\n    { name: 'Dave', city: 'Chicago' }\n];\n\n// Your function\nfunction groupByProperty(arr, property) {\n    // Implement this function\n}\n\nconsole.log(groupByProperty(users, 'city'));\n// Expected Output: \n// {\n//     'New York': [\n//         { name: 'Alice', city: 'New York' },\n//         { name: 'Charlie', city: 'New York' }\n//     ],\n//     'Los Angeles': [{ name: 'Bob', city: 'Los Angeles' }],\n//     'Chicago': [{ name: 'Dave', city: 'Chicago' }]\n// }",
        "challenge": "Given an array of objects, \ngroup the objects by a specific property, \nand return an object where the keys are the values of the property,\n and the values are arrays of objects that have that property value.",
        "solution": "function groupByProperty(arr, property) {\n    return arr.reduce((acc, curr) => {\n        const key = curr[property];\n        if (!acc[key]) {\n            acc[key] = [];\n        }\n        acc[key].push(curr);\n        return acc;\n    }, {});\n}\n\nconsole.log(groupByProperty(users, 'city'));\n// Output:\n// {\n//     'New York': [\n//         { name: 'Alice', city: 'New York' },\n//         { name: 'Charlie', city: 'New York' }\n//     ],\n//     'Los Angeles': [{ name: 'Bob', city: 'Los Angeles' }],\n//     'Chicago': [{ name: 'Dave', city: 'Chicago' }]\n// }",
        "starter": "const users = [\n    { name: 'Alice', city: 'New York' },\n    { name: 'Bob', city: 'Los Angeles' },\n    { name: 'Charlie', city: 'New York' },\n    { name: 'Dave', city: 'Chicago' }\n];\n\n// Your function\nfunction groupByProperty(arr, property) {\n    // Implement this function\n}\n\nconsole.log(groupByProperty(users, 'city'));\n// Expected Output: \n// {\n//     'New York': [\n//         { name: 'Alice', city: 'New York' },\n//         { name: 'Charlie', city: 'New York' }\n//     ],\n//     'Los Angeles': [{ name: 'Bob', city: 'Los Angeles' }],\n//     'Chicago': [{ name: 'Dave', city: 'Chicago' }]\n// }",
        "title": "Array methods",
        "subtitle": "Group By Property"
    },
    {
        "type": "event",
        "content": "// Your function\nfunction startTimer() {\n    // Implement this function\n}\n\nstartTimer();",
        "challenge": "You need to simulate a timer that prints \"Tick\" every second. After 5 seconds, stop the timer and print \"Done\". Use the event loop and asynchronous functions to achieve this.",
        "solution": "function startTimer() {\n    let count = 0;\n\n    const intervalId = setInterval(() => {\n        count++;\n        console.log('Tick');\n\n        if (count === 5) {\n            // After 5 ticks, clear the interval and log 'Done'\n            clearInterval(intervalId);\n            console.log('Done');\n        }\n    }, 1000);\n}\n\nstartTimer();",
        "starter": "// Your function\nfunction startTimer() {\n    // Implement this function\n}\n\nstartTimer();",
        "title": "Event loop",
        "subtitle": "Simulate a Timer"
    },
    {
        "type": "error",
        "title": "Error handling",
        "subtitle": "Fetch User Data with Error Handling",
        "content": "const fetchUser = async (userId) => {\n    // Simulate a user fetch from an API\n    if (userId === 1) {\n        return { name: 'Alice' };\n    } else {\n        throw new Error('User not found');\n    }\n};\n\n// Your function\nasync function getUserData(userId) {\n    // Implement this function with error handling\n}\n\ngetUserData(1);  // Expected: \"User: Alice\"\ngetUserData(2);  // Expected: \"Error: User not found\"",
        "challenge": "You need to fetch user data from an API. If the fetch is successful, log the userâ€™s name. If an error occurs (e.g., the user is not found), catch the error and display a custom error message.",
        "solution": "async function getUserData(userId) {\n    try {\n        const user = await fetchUser(userId);\n        console.log(`User: ${user.name}`);\n    } catch (error) {\n        console.log(`Error: ${error.message}`);\n    }\n}\n\ngetUserData(1);  // Output: \"User: Alice\"\ngetUserData(2);  // Output: \"Error: User not found\"",
        "starter": "const fetchUser = async (userId) => {\n    // Simulate a user fetch from an API\n    if (userId === 1) {\n        return { name: 'Alice' };\n    } else {\n        throw new Error('User not found');\n    }\n};\n\n// Your function\nasync function getUserData(userId) {\n    // Implement this function with error handling\n}\n\ngetUserData(1);  // Expected: \"User: Alice\"\ngetUserData(2);  // Expected: \"Error: User not found\""
    },
    {
        "type": "data",
        "title": "Data structures",
        "subtitle": "Remove Duplicates from an Array Using Set",
        "content": "function removeDuplicates(arr) {\n    // Implement this function using a Set\n}\n\n// Example usage:\nconsole.log(removeDuplicates([1, 2, 2, 3, 4, 4, 5]));  // Expected: [1, 2, 3, 4, 5]\nconsole.log(removeDuplicates([10, 20, 20, 30]));        // Expected: [10, 20, 30]",
        "challenge": "You need to remove duplicates from an array using a Set and return the result as a new array.",
        "solution": "function removeDuplicates(arr) {\n    return [...new Set(arr)];\n}\n\nconsole.log(removeDuplicates([1, 2, 2, 3, 4, 4, 5]));  // Output: [1, 2, 3, 4, 5]\nconsole.log(removeDuplicates([10, 20, 20, 30]));        // Output: [10, 20, 30]",
        "starter": "function removeDuplicates(arr) {\n    // Implement this function using a Set\n}\n\n// Example usage:\nconsole.log(removeDuplicates([1, 2, 2, 3, 4, 4, 5]));  // Expected: [1, 2, 3, 4, 5]\nconsole.log(removeDuplicates([10, 20, 20, 30]));        // Expected: [10, 20, 30]"
    }
]